- name: Deploy Fauxdan Application with Git Pull Strategy
  hosts: all
  become: yes
  vars:
    workspace_dir: /fauxdan
    git_repo: "ssh://git@gitlab.icarostangent.lab:2222/josh/fauxdan.git"
    git_branch: master
    gitlab_registry_username: "{{ gitlab_registry_username }}"
    gitlab_registry_password: "{{ gitlab_registry_password }}"

  tasks:
    - name: Check if ~/.ssh directory exists
      stat:
        path: ~/.ssh
      register: ssh_dir_stat

    - name: Create SSH directory if it doesn't exist
      file:
        path: ~/.ssh
        state: directory
        mode: '0700'
        owner: root
        group: root
      when: not ssh_dir_stat.stat.exists
      
    - name: Check if SSH private key exists
      stat:
        path: ~/.ssh/id_rsa
      register: ssh_key_stat
      when: ssh_dir_stat.stat.exists

    - name: Create SSH keys if they don't exist
      shell: |
        echo "{{ fauxdan_ssh_private_key }}" | base64 -d > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        echo "{{ fauxdan_ssh_public_key }}" > ~/.ssh/id_rsa.pub
        chmod 644 ~/.ssh/id_rsa.pub
      when: not ssh_key_stat.stat.exists

    - name: Ensure git is installed
      become: yes
      package:
        name: git
        state: present

    - name: Create workspace directory
      file:
        path: "{{ workspace_dir }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Check if repository exists
      stat:
        path: "{{ workspace_dir }}/.git"
      register: git_repo_exists

    - name: Clone repository if it doesn't exist
      git:
        repo: "{{ git_repo }}"
        dest: "{{ workspace_dir }}"
        version: "{{ git_branch }}"
        depth: 1
        accept_hostkey: yes
      when: not git_repo_exists.stat.exists
      register: git_clone_result

    - name: Update repository if it exists
      git:
        repo: "{{ git_repo }}"
        dest: "{{ workspace_dir }}"
        version: "{{ git_branch }}"
        accept_hostkey: yes
        force: yes
      when: git_repo_exists.stat.exists
      register: git_pull_result

    - name: Display git status
      shell: |
        cd {{ workspace_dir }}
        echo "Current branch: $(git branch --show-current)"
        echo "Latest commit: $(git log -1 --oneline)"
        echo "Repository status:"
        git status --porcelain
      register: git_status_output

    - name: Show git status
      debug:
        msg: "{{ git_status_output.stdout_lines }}"

    - name: Ensure Docker Compose is available
      command: docker compose --version
      register: docker_compose_version
      changed_when: false

    - name: Check if .env is present
      stat:
        path: "{{ workspace_dir }}/.env"
      register: env_file_exists

    - name: Create .env file from gitlab variables
      template:
        src: "./env.template"
        dest: "{{ workspace_dir }}/.env"
        owner: root
        group: root
        mode: '0644'
      vars:
        POSTGRES_PASSWORD: "{{ postgres_password }}"
        DJANGO_DB_PASSWORD: "{{ django_db_password }}"
        DJANGO_SECRET_KEY: "{{ django_secret_key }}"
      when: not env_file_exists.stat.exists

    - name: Login to GitLab Container Registry
      shell: |
        echo "{{ gitlab_registry_password }}" | docker login gitlab.icarostangent.lab:5050 -u "{{ gitlab_registry_username }}" --password-stdin
      register: docker_login_result
      changed_when: false

    - name: Show Docker login result
      debug:
        msg: "{{ docker_login_result.stdout_lines }}"

    # commenting this drastically improves pull time but gradually consumes disk space
    # - name: Prune Docker system
    #   shell: |
    #     docker system prune -a -f
    #   args:
    #     chdir: "{{ workspace_dir }}"
    #   register: docker_prune_result

    # - name: Show Docker prune results
    #   debug:
    #     msg: "{{ docker_prune_result.stdout_lines }}"

    - name: Pull latest Docker images
      shell: |
        cd {{ workspace_dir }}
        docker compose -f docker-compose.staging.yml --env-file .env pull
      args:
        chdir: "{{ workspace_dir }}"
      register: docker_pull_result

    - name: Show Docker pull results
      debug:
        msg: "{{ docker_pull_result.stdout_lines }}"

    - name: Start Docker Compose services
      shell: |
        cd {{ workspace_dir }}
        docker compose -f docker-compose.staging.yml --env-file .env up -d --remove-orphans
      args:
        chdir: "{{ workspace_dir }}"
      register: docker_up_result

    - name: Show Docker up results
      debug:
        msg: "{{ docker_up_result.stdout_lines }}"

    - name: Wait for services to be ready
      wait_for:
        host: localhost
        port: "{{ item }}"
        delay: 10
        timeout: 300
        state: started
      loop:
        - 80
        - 443


    - name: Check Database logs
      shell: |
        cd {{ workspace_dir }}
        docker compose -f docker-compose.staging.yml --env-file .env logs --tail=50 db
      args:
        chdir: "{{ workspace_dir }}"
      register: db_logs
      failed_when: false

    - name: Show Database logs
      debug:
        msg: "{{ db_logs.stdout_lines }}"

    - name: Check Elasticsearch logs
      shell: |
        cd {{ workspace_dir }}
        docker compose -f docker-compose.staging.yml --env-file .env logs --tail=50 elasticsearch
      args:
        chdir: "{{ workspace_dir }}"
      register: elasticsearch_logs
      failed_when: false

    - name: Show Elasticsearch logs
      debug:
        msg: "{{ elasticsearch_logs.stdout_lines }}"

    - name: Check Caddy logs
      shell: |
        cd {{ workspace_dir }}
        docker compose -f docker-compose.staging.yml --env-file .env logs caddy
      args:
        chdir: "{{ workspace_dir }}"
      register: caddy_logs
      failed_when: false

    - name: Show Caddy logs
      debug:
        msg: "{{ caddy_logs.stdout_lines }}"

    - name: Check service health
      uri:
        url: "{{ 'https://staging.fauxdan.io/api/health/' if 'staging' in inventory_hostname else 'https://fauxdan.io/api/health/' }}"
        method: GET
        status_code: [200, 404]
        timeout: 30
        validate_certs: false
      retries: 5
      delay: 10
      register: health_check_result
      failed_when: false

    - name: Show health check results
      debug:
        msg: "Health check status: {{ health_check_result.status }} - URL: {{ 'https://staging.fauxdan.io/api/health/' if 'staging' in inventory_hostname else 'https://fauxdan.io/api/health/' }}"

    - name: Verify Docker services are running
      shell: |
        cd {{ workspace_dir }}
        docker compose -f docker-compose.staging.yml --env-file .env ps
      args:
        chdir: "{{ workspace_dir }}"
      register: docker_ps_result

    - name: Show running services
      debug:
        msg: "{{ docker_ps_result.stdout_lines }}"

    - name: Check for any failed containers
      shell: |
        cd {{ workspace_dir }}
        docker compose -f docker-compose.staging.yml --env-file .env ps --filter "status=exited"
      args:
        chdir: "{{ workspace_dir }}"
      register: failed_containers
      failed_when: false

    - name: Show failed containers
      debug:
        msg: "Failed containers: {{ failed_containers.stdout_lines }}"
      when: failed_containers.stdout_lines | length > 1

    - name: Deployment summary
      debug:
        msg: |
          ========================================
          DEPLOYMENT SUMMARY
          ========================================
          Repository: {{ git_repo }}
          Branch: {{ git_branch }}
          Workspace: {{ workspace_dir }}
          Latest Commit: {{ git_status_output.stdout_lines[1] if git_status_output.stdout_lines | length > 1 else 'Unknown' }}
          Health Check: {{ health_check_result.status }}
          Failed Containers: {{ failed_containers.stdout_lines | length - 1 if failed_containers.stdout_lines | length > 1 else 0 }}
          ========================================
