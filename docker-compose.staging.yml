services:
  backend:
    image: gitlab.icarostangent.lab:5050/josh/fauxdan/staging-backend
    restart: unless-stopped
    expose:
      - "8000"
    volumes:
      - staticfiles:/app/staticfiles
      - logs:/var/log/app
    environment:
      - DJANGO_DEBUG=False
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DB_NAME=${DJANGO_DB_NAME}
      - DJANGO_DB_USER=${DJANGO_DB_USER}
      - DJANGO_DB_PASSWORD=${DJANGO_DB_PASSWORD}
      - DJANGO_DB_HOST=${DJANGO_DB_HOST}
      - DJANGO_DB_PORT=${DJANGO_DB_PORT}
      - DJANGO_ALLOWED_HOSTS=staging.fauxdan.io,staging-admin.fauxdan.io,localhost,127.0.0.1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 120s

  # Backend-admin service for admin-specific functionality
  backend-admin:
    image: gitlab.icarostangent.lab:5050/josh/fauxdan/staging-backend
    restart: unless-stopped
    expose:
      - "8000"
    volumes:
      - staticfiles:/app/staticfiles
      - logs:/var/log/app
    environment:
      - DJANGO_DEBUG=False
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DB_NAME=${DJANGO_DB_NAME}
      - DJANGO_DB_USER=${DJANGO_DB_USER}
      - DJANGO_DB_PASSWORD=${DJANGO_DB_PASSWORD}
      - DJANGO_DB_HOST=${DJANGO_DB_HOST}
      - DJANGO_DB_PORT=${DJANGO_DB_PORT}
      - DJANGO_ALLOWED_HOSTS=staging.fauxdan.io,staging-admin.fauxdan.io,localhost,127.0.0.1
      - DJANGO_ADMIN_PORT=8000
    depends_on:
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 120s

  # Scanner service for background processing
  scanner:
    image: gitlab.icarostangent.lab:5050/josh/fauxdan/staging-scanner
    restart: unless-stopped
    volumes:
      - logs:/var/log/app
    environment:
      - DJANGO_DEBUG=False
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DB_NAME=${DJANGO_DB_NAME}
      - DJANGO_DB_USER=${DJANGO_DB_USER}
      - DJANGO_DB_PASSWORD=${DJANGO_DB_PASSWORD}
      - DJANGO_DB_HOST=${DJANGO_DB_HOST}
      - DJANGO_DB_PORT=${DJANGO_DB_PORT}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    cap_add:
      - NET_ADMIN

  db:
    image: gitlab.icarostangent.lab:5050/josh/fauxdan/staging-db
    restart: unless-stopped
    expose:
      - "5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DJANGO_DB_NAME=${DJANGO_DB_NAME}
      - DJANGO_DB_USER=${DJANGO_DB_USER}
      - DJANGO_DB_PASSWORD=${DJANGO_DB_PASSWORD}
      - DJANGO_DB_HOST=${DJANGO_DB_HOST}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${DJANGO_DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: gitlab.icarostangent.lab:5050/josh/fauxdan/staging-redis
    restart: unless-stopped
    expose:
      - "6379"
    volumes:
      - redis_data:/data

  caddy:
    image: gitlab.icarostangent.lab:5050/josh/fauxdan/staging-caddy
    restart: unless-stopped
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"
    environment:
      - VUE_APP_API_URL=${VUE_APP_API_URL}
    volumes:
      - ./caddy/Caddyfile.staging:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_logs:/var/log/caddy
      - caddy_certs:/etc/caddy/certs
      - staticfiles:/staticfiles
    depends_on:
      backend:
        condition: service_healthy

  # Caddy-admin service for admin panel routing
  caddy-admin:
    image: gitlab.icarostangent.lab:5050/josh/fauxdan/staging-caddy
    restart: unless-stopped
    ports:
      - "10.10.10.4:8443:8443"
    volumes:
      - ./caddy/Caddyfile.admin.staging:/etc/caddy/Caddyfile
      - ./monitoring/admin:/admin
      - caddy_data:/data
      - caddy_logs:/var/log/caddy
      - caddy_certs:/etc/caddy/certs
      - staticfiles:/staticfiles
    depends_on:
      backend-admin:
        condition: service_healthy
      grafana:
        condition: service_started
      prometheus:
        condition: service_started

  tor:
    image: dperson/torproxy
    restart: unless-stopped
    expose:
      - "9050"
      - "9090"

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    expose:
      - "9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.external-url=https://staging-admin.icarostangent.lab:8443/prometheus'

  # Grafana for dashboards and visualization
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    expose:
      - "3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning/grafana/grafana.ini:/etc/grafana/grafana.ini
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SERVER_ROOT_URL=https://staging-admin.icarostangent.lab:8443/grafana/
      - GF_SERVER_SERVE_FROM_SUBPATH=true
    depends_on:
      - prometheus

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    restart: unless-stopped
    expose:
      - "9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

  # Redis Exporter for Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    restart: unless-stopped
    expose:
      - "9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    depends_on:
      - redis

  # Postgres Exporter for database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    restart: unless-stopped
    expose:
      - "9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://${DJANGO_DB_USER}:${DJANGO_DB_PASSWORD}@${DJANGO_DB_HOST}:${DJANGO_DB_PORT}/${DJANGO_DB_NAME}?sslmode=disable
    depends_on:
      db:
        condition: service_healthy

  # Elasticsearch for log storage and search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    restart: unless-stopped
    expose:
      - "9200"
      - "9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - bootstrap.memory_lock=true
    volumes:
      - ./monitoring/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      - elasticsearch_data:/usr/share/elasticsearch/data
      - elasticsearch_logs:/usr/share/elasticsearch/logs
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Log forwarder to send Django logs to Logstash
  log-forwarder:
    image: gitlab.icarostangent.lab:5050/josh/fauxdan/staging-log-forwarder
    restart: unless-stopped
    volumes:
      - logs:/var/log/app
    environment:
      - LOG_FILE=/var/log/app/django.log
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5000
    depends_on:
      logstash:
        condition: service_healthy

  # Logstash for log processing and forwarding
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    restart: unless-stopped
    expose:
      - "5000"
      - "5044"
      - "514"
      - "9600"
    volumes:
      - ./monitoring/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./monitoring/logstash/templates:/usr/share/logstash/templates:ro
      - logs:/var/log/app
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - logstash_data:/usr/share/logstash/data
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600/_node/stats || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana for log visualization and analysis
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    restart: unless-stopped
    expose:
      - "5601"
    volumes:
      - ./monitoring/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      - kibana_data:/usr/share/kibana/data
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=""
      - ELASTICSEARCH_PASSWORD=""
    depends_on:
      elasticsearch:
        condition: service_healthy
      logstash:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  db_data:
  staticfiles:
  redis_data:
  caddy_data:
  caddy_logs:
  caddy_certs:
  logs:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  elasticsearch_logs:
  logstash_data:
  kibana_data: