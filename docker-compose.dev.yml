services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    expose:
      - "3000"
    volumes:
      - ./frontend:/app 
      - node_modules:/app/node_modules
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev.backend
    expose:
      - "8000"
    volumes:
      - ./backend:/app 
      - ./static:/static
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DB_NAME=${DJANGO_DB_NAME}
      - DJANGO_DB_USER=${DJANGO_DB_USER}
      - DJANGO_DB_PASSWORD=${DJANGO_DB_PASSWORD}
      - DJANGO_DB_HOST=${DJANGO_DB_HOST}
      - DJANGO_DB_PORT=${DJANGO_DB_PORT}
      - ELASTICSEARCH_HOST=${ELASTICSEARCH_HOST}
    depends_on:
      - db
      - redis
      - elasticsearch
    command: ["/bin/bash", "/app/init.sh"]
    restart: unless-stopped
      
  scanner:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev.scanner
    volumes:
      - ./backend:/app 
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DB_NAME=${DJANGO_DB_NAME}
      - DJANGO_DB_USER=${DJANGO_DB_USER}
      - DJANGO_DB_PASSWORD=${DJANGO_DB_PASSWORD}
      - DJANGO_DB_HOST=${DJANGO_DB_HOST}
      - ELASTICSEARCH_HOST=${ELASTICSEARCH_HOST}
    depends_on:
      - db
      - redis
    restart: unless-stopped
    cap_add:
      - NET_ADMIN

  db:
    build:
      context: ./db
    expose:
      - "5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DJANGO_DB_NAME=${DJANGO_DB_NAME}
      - DJANGO_DB_USER=${DJANGO_DB_USER}
      - DJANGO_DB_PASSWORD=${DJANGO_DB_PASSWORD}
      - DJANGO_DB_HOST=${DJANGO_DB_HOST}
    volumes:
      - db_data:/var/lib/postgresql/data
      # - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./db/init_db.sh:/docker-entrypoint-initdb.d/init_db.sh
    restart: unless-stopped

  redis:
    build:
      context: ./redis
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  caddy:
    image: caddy:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./caddy/Caddyfile.dev:/etc/caddy/Caddyfile
      - ./static:/static
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

  tor:
    build:
      context: ./tor
    expose:
      - "9050"
      - "9090"
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    expose:
      - "9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

volumes:
  db_data:
  redis_data:
  node_modules:
  elasticsearch_data:
  caddy_data:
  caddy_config:
