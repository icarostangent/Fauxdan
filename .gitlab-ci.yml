stages:
  - backup
  - install-wireguard
  - provision-docker
  - initialize-swarm
  - join-nodes
  - deploy-application

variables:
  ANSIBLE_HOST_KEY_CHECKING: "False"
  ANSIBLE_STDOUT_CALLBACK: "yaml"

backup:master:
  stage: backup
  allow_failure: true
  script:
    - echo "Creating backup of master branch..."
    - |
      # Simple backup using git commands instead of API calls
      COMMIT_SHA=$(git rev-parse HEAD)
      BACKUP_TAG="backup-master-$(date +%Y%m%d-%H%M%S)"
      BACKUP_BRANCH="backup/master-$(date +%Y%m%d-%H%M%S)"
      
      echo "Creating backup tag: $BACKUP_TAG for commit: $COMMIT_SHA"
      
      # Create local tag
      if git tag "$BACKUP_TAG" "$COMMIT_SHA"; then
        echo "✅ Local backup tag created: $BACKUP_TAG"
        # Push tag to remote
        if git push origin "$BACKUP_TAG"; then
          echo "✅ Backup tag pushed to remote: $BACKUP_TAG"
        else
          echo "⚠️ Local tag created but failed to push to remote"
        fi
      else
        echo "❌ Failed to create local backup tag"
      fi
      
      # Create local backup branch
      if git checkout -b "$BACKUP_BRANCH" "$COMMIT_SHA"; then
        echo "✅ Local backup branch created: $BACKUP_BRANCH"
        # Push branch to remote
        if git push origin "$BACKUP_BRANCH"; then
          echo "✅ Backup branch pushed to remote: $BACKUP_BRANCH"
        else
          echo "⚠️ Local branch created but failed to push to remote"
        fi
        # Switch back to detached HEAD
        git checkout "$COMMIT_SHA"
      else
        echo "❌ Failed to create local backup branch"
      fi
      
      echo "✅ Backup process completed"
  only:
    - master
  when: always

install:wireguard:
  stage: install-wireguard
  before_script:
    # Install Python and pip if not available
    - apt-get update && apt-get install -y python3 python3-pip
    # Install Ansible
    - pip3 install ansible
    # Install required Ansible collections
    - ansible-galaxy collection install community.general
  script:
    - echo "$SSH_PRIVATE_KEY" | base64 -d > id_rsa
    - chmod 600 id_rsa
    - ansible all -i hosts.ini --private-key id_rsa -m ping
    - |
      ansible-playbook -i hosts.ini --private-key id_rsa 00-install-wireguard.yml \
        -e "edge_private_key=$EDGE_PRIVATE_KEY" \
        -e "edge_public_key=$EDGE_PUBLIC_KEY" \
        -e "edge_peer_public_key=$EDGE_PEER_PUBLIC_KEY" \
        -e "edge_peer_endpoint=$EDGE_PEER_ENDPOINT"
  only:
    - master
  artifacts:
    reports:
      junit: ansible-results.xml
    when: always

provision:docker:
  stage: provision-docker
  before_script:
    # Install Python and pip if not available
    - apt-get update && apt-get install -y python3 python3-pip
    # Install Ansible
    - pip3 install ansible
    # Install required Ansible collections
    - ansible-galaxy collection install community.general
  script:
    - echo "$SSH_PRIVATE_KEY" | base64 -d > id_rsa
    - chmod 600 id_rsa
    - ansible all -i hosts.ini --private-key id_rsa -m ping
    - ansible-playbook -i hosts.ini --private-key id_rsa 01-provision-docker.yml
  only:
    - master
  needs:
    - install:wireguard
  artifacts:
    reports:
      junit: ansible-results.xml
    when: always

initialize:swarm:
  stage: initialize-swarm
  before_script:
    # Install Python and pip if not available
    - apt-get update && apt-get install -y python3 python3-pip
    # Install Ansible
    - pip3 install ansible
    # Install required Ansible collections
    - ansible-galaxy collection install community.general
  script:
    - echo "$SSH_PRIVATE_KEY" | base64 -d > id_rsa
    - chmod 600 id_rsa
    - ansible-playbook -i hosts.ini --private-key id_rsa 02-initialize-swarm.yml
  only:
    - master
  needs:
    - provision:docker
  artifacts:
    reports:
      junit: ansible-results.xml
    when: always

join:nodes:
  stage: join-nodes
  before_script:
    # Install Python and pip if not available
    - apt-get update && apt-get install -y python3 python3-pip
    # Install Ansible
    - pip3 install ansible
    # Install required Ansible collections
    - ansible-galaxy collection install community.general
  script:
    - echo "$SSH_PRIVATE_KEY" | base64 -d > id_rsa
    - chmod 600 id_rsa
    - ansible-playbook -i hosts.ini --private-key id_rsa 03-join-swarm-nodes.yml
  only:
    - master
  needs:
    - initialize:swarm
  artifacts:
    reports:
      junit: ansible-results.xml
    when: always

build:images:
  stage: build
  before_script:
    - echo "$GITLAB_REGISTRY_PASSWORD" | docker login gitlab.icarostangent.lab:5050 -u $GITLAB_REGISTRY_USERNAME --password-stdin
  script:
    - docker compose -f docker-compose.build.yml build
    - docker compose -f docker-compose.build.yml push
    - docker system prune -f
  only:
    - master
  tags:
    - docker

deploy:application:
  stage: deploy-application
  environment:
    name: production
  before_script:
    # Install Python and pip if not available
    - apt-get update && apt-get install -y python3 python3-pip
    # Install Ansible
    - pip3 install ansible
    # Install required Ansible collections
    - ansible-galaxy collection install community.general
  script:
    - echo "$SSH_PRIVATE_KEY" | base64 -d > id_rsa
    - chmod 600 id_rsa
    - |
      ansible-playbook -i hosts.ini --private-key id_rsa 04-deploy-application.yml \
        -e "postgres_password=$POSTGRES_PASSWORD" \
        -e "django_db_password=$DJANGO_DB_PASSWORD" \
        -e "django_secret_key=$DJANGO_SECRET_KEY" \
        -e "fauxdan_ssh_private_key=$FAUXDAN_SSH_PRIVATE_KEY" \
        -e "fauxdan_ssh_public_key=$FAUXDAN_SSH_PUBLIC_KEY" \
        -e "gitlab_registry_username=$GITLAB_REGISTRY_USERNAME" \
        -e "gitlab_registry_password=$GITLAB_REGISTRY_PASSWORD"
  only:
    - master
  needs:
    - join:nodes
    - build:images
  artifacts:
    reports:
      junit: ansible-results.xml
    when: always
