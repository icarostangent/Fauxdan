stages:
  - backup
  - provision
  - build
  - deploy

variables:
  ANSIBLE_HOST_KEY_CHECKING: "False"

backup:master:
  stage: backup
  script:
    - echo "Creating backup of master branch..."
    - |
      # Validate required variables
      if [ -z "$GITLAB_API_TOKEN" ]; then
        echo "❌ ERROR: GITLAB_API_TOKEN is not set"
        echo "Please set the GITLAB_API_TOKEN variable in your GitLab project settings"
        exit 1
      fi
      
      if [ -z "$CI_API_V4_URL" ] || [ -z "$CI_PROJECT_ID" ]; then
        echo "❌ ERROR: GitLab CI variables are not set"
        echo "CI_API_V4_URL: $CI_API_V4_URL"
        echo "CI_PROJECT_ID: $CI_PROJECT_ID"
        exit 1
      fi
      
      # Create backup using GitLab API with source branch info
      COMMIT_SHA=$(git rev-parse HEAD)
      
      # Get source branch information
      if [ -n "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME" ]; then
        SOURCE_BRANCH="$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
        BACKUP_TAG="backup-${SOURCE_BRANCH}-$(date +%Y%m%d-%H%M%S)"
        BACKUP_BRANCH="backup/${SOURCE_BRANCH}-$(date +%Y%m%d-%H%M%S)"
        BACKUP_MESSAGE="Automated backup from merge request: $CI_MERGE_REQUEST_TITLE (Source: $SOURCE_BRANCH)"
        echo "Creating backup from merge request: $CI_MERGE_REQUEST_TITLE"
        echo "Source branch: $SOURCE_BRANCH"
      else
        # Fallback for direct pushes to master
        BACKUP_TAG="backup-master-$(date +%Y%m%d-%H%M%S)"
        BACKUP_BRANCH="backup/master-$(date +%Y%m%d-%H%M%S)"
        BACKUP_MESSAGE="Automated backup before deployment (Direct push to master)"
        echo "Creating backup from direct push to master"
      fi
      
      echo "Creating backup tag: $BACKUP_TAG for commit: $COMMIT_SHA"
      
      # Create tag using GitLab API
      echo "Creating backup tag: $BACKUP_TAG"
      TAG_RESPONSE=$(curl -w "\nHTTP_CODE:%{http_code}\n" -s --request POST \
        --header "PRIVATE-TOKEN: $GITLAB_API_TOKEN" \
        --header "Content-Type: application/json" \
        --data "{\"tag_name\": \"$BACKUP_TAG\", \"ref\": \"$COMMIT_SHA\", \"message\": \"$BACKUP_MESSAGE\"}" \
        "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/tags")
      
      echo "Tag API response: $TAG_RESPONSE"
      
      if echo "$TAG_RESPONSE" | grep -q "HTTP_CODE:201\|HTTP_CODE:200"; then
        echo "✅ Backup tag created successfully: $BACKUP_TAG"
      else
        echo "❌ Failed to create backup tag. Response: $TAG_RESPONSE"
        echo "Please check that GITLAB_API_TOKEN is set and has 'api' scope"
        exit 1
      fi
      
      # Create backup branch
      echo "Creating backup branch: $BACKUP_BRANCH"
      BRANCH_RESPONSE=$(curl -w "\nHTTP_CODE:%{http_code}\n" -s --request POST \
        --header "PRIVATE-TOKEN: $GITLAB_API_TOKEN" \
        --header "Content-Type: application/json" \
        --data "{\"branch\": \"$BACKUP_BRANCH\", \"ref\": \"$COMMIT_SHA\"}" \
        "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/branches")
      
      echo "Branch API response: $BRANCH_RESPONSE"
      
      if echo "$BRANCH_RESPONSE" | grep -q "HTTP_CODE:201\|HTTP_CODE:200"; then
        echo "✅ Backup branch created successfully: $BACKUP_BRANCH"
      else
        echo "❌ Failed to create backup branch. Response: $BRANCH_RESPONSE"
        echo "Please check that GITLAB_API_TOKEN is set and has 'api' scope"
        exit 1
      fi
      
      echo "✅ Backup completed successfully"
  only:
    - master
  when: always

provision:
  stage: provision
  before_script:
    # Install Python and pip if not available
    - python3 --version || (apt-get update && apt-get install -y python3 python3-pip)
    - pip3 --version || (apt-get update && apt-get install -y python3-pip)
    # Install Ansible
    - ansible --version || pip3 install ansible
    # Install required Ansible collections
    - ansible-galaxy collection install community.general
  script:
    - echo "$SSH_PRIVATE_KEY" > id_rsa.base64
    - echo "$SSH_PRIVATE_KEY" | base64 -d > id_rsa
    - chmod 600 id_rsa
    - ansible all -i hosts.ini --private-key id_rsa -m ping
    - ansible-playbook -K -i hosts.ini --private-key id_rsa provision-server.yml --extra-vars "ansible_become_password=$ROOT_PASSWORD"
  only:
    - master

build:production:
  stage: build
  before_script:
    - echo "$GITLAB_REGISTRY_PASSWORD" | docker login gitlab.icarostangent.lab:5050 -u $GITLAB_REGISTRY_USERNAME --password-stdin
  script:
    # - docker compose -f docker-compose.build.yml pull
    - docker compose -f docker-compose.build.yml build
    - docker compose -f docker-compose.build.yml push
    - docker system prune -f
  only:
    - master
  tags:
    - docker

deploy:production:
  stage: deploy
  environment:
    name: prod
  before_script:
    # Install Python and pip if not available
    - python3 --version || (apt-get update && apt-get install -y python3 python3-pip)
    - pip3 --version || (apt-get update && apt-get install -y python3-pip)
    # Install Ansible
    - ansible --version || pip3 install ansible
    # Install required Ansible collections
    - ansible-galaxy collection install community.general
  script:
    - echo "$SSH_PRIVATE_KEY" | base64 -d > id_rsa
    - chmod 600 id_rsa
    - |
      ansible-playbook -i hosts.ini --private-key id_rsa deploy-application.yml \
        -e "ansible_become_password=$ROOT_PASSWORD" \
        -e "django_db_password=$DJANGO_DB_PASSWORD" \
        -e "django_secret_key=$DJANGO_SECRET_KEY" \
        -e "postgres_password=$POSTGRES_PASSWORD" \
        -e "fauxdan_ssh_private_key=$FAUXDAN_SSH_PRIVATE_KEY" \
        -e "fauxdan_ssh_public_key=$FAUXDAN_SSH_PUBLIC_KEY" \
        -e "gitlab_registry_username=$GITLAB_REGISTRY_USERNAME" \
        -e "gitlab_registry_password=$GITLAB_REGISTRY_PASSWORD"
  only:
    - master
  needs:
    - provision
    - build:production
